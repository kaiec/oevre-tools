// Generated by CoffeeScript 1.7.1
var Exif, consoleScrolling, exif, fs, oevre, path, tools, _createPhotobook, _log, _sortImages, _walkDirExtraction, _writeXMP;

tools = require("kaiec-tools");

path = require("path");

consoleScrolling = true;

Exif = new require('kaiec-exif').Exif;

exif = new Exif("exiftool\\exiftool");

oevre = require('../js/oevre');

fs = require("fs");

_log = function(text, before, after, pre) {
  var escape, html, x, _i, _j;
  if (before == null) {
    before = 0;
  }
  if (after == null) {
    after = 0;
  }
  if (pre == null) {
    pre = false;
  }
  escape = require('escape-html');
  html = "";
  for (x = _i = 0; 0 <= before ? _i < before : _i > before; x = 0 <= before ? ++_i : --_i) {
    html += "<br/>";
  }
  if (pre) {
    html += "<pre>";
  }
  html += escape(text);
  if (pre) {
    html += "</pre>";
  }
  html += "<br/>";
  for (x = _j = 0; 0 <= after ? _j < after : _j > after; x = 0 <= after ? ++_j : --_j) {
    html += "<br/>";
  }
  $("#output").append(html);
  if (consoleScrolling) {
    return $("#output").scrollTop(99999999999999);
  }
};

tools.log.setWriter(_log);

_walkDirExtraction = function(directory) {
  var after, files, walk, walker;
  _log("Looking for files in " + directory, after = 1);
  walk = require('walk');
  files = [];
  walker = walk.walk(directory, {
    followLinks: false
  });
  walker.on('file', function(root, stat, next) {
    var data, fdir, filename, imageData;
    if (stat.name.indexOf(".jpg") === -1 && stat.name.indexOf(".JPG") === -1) {
      return next();
    }
    filename = stat.name.replace(".JPG", "").replace(".jpg", "");
    fdir = root.replace(directory, "");
    data = filename.split(",");
    imageData = oevre.extractData(data, fdir, fdir + "/" + stat.name);
    if (!imageData.sane) {
      _log(imageData.errorMsg);
    } else {
      files.push(imageData);
      _writeXMP(root + "\\" + stat.name, imageData);
      _log("Updated: " + root + "\\" + stat.name);
    }
    return next();
  });
  return walker.on('end', function() {
    return _log("Finished! " + files.length + " sane images.", 1, 2);
  });
};

_sortImages = function(directory) {
  var after, counter, files, walk, walker;
  _log("Looking for files in " + directory, after = 1);
  walk = require('walk');
  files = [];
  counter = 0;
  walker = walk.walk(directory, {
    followLinks: false
  });
  walker.on('file', function(root, stat, next) {
    var counterString, file, fileNew;
    if (stat.name.indexOf(".jpg") === -1 && stat.name.indexOf(".JPG") === -1) {
      return next();
    }
    file = root + "\\" + stat.name;
    counterString = String('000' + counter).slice(-3);
    fileNew = root + "\\" + counterString + "00-" + stat.name;
    _log("Renaming " + file);
    fs.renameSync(file, fileNew);
    counter++;
    return next();
  });
  return walker.on('end', function() {
    return _log("Finished! ", 1, 2);
  });
};

_writeXMP = function(file, imageData) {
  return exif.setXMPTags("oevre", imageData, file);
};

_createPhotobook = function(directory, photobook, target) {
  var Fotobook, after, fb, files, walk, walker;
  Fotobook = require('kaiec-fotobook').Fotobook;
  fb = new Fotobook(photobook, target);
  _log(fb.getStatistics(), 0, 0, true);
  _log("Looking for files in " + directory, after = 1);
  walk = require('walk');
  files = [];
  walker = walk.walk(directory, {
    followLinks: false
  });
  walker.on('file', function(root, stat, next) {
    if (stat.name.indexOf(".jpg") === -1 && stat.name.indexOf(".JPG") === -1) {
      return next();
    }
    fb.insertImage(root + path.sep + stat.name);
    return next();
  });
  return walker.on('end', function() {
    return fb.ready(function() {
      return _log("Finished. New book saved to " + target);
    });
  });
};

$(function() {
  var error;
  try {
    process.on("uncaughtException", function(err) {
      return _log(err);
    });
    $(".section").each(function() {
      return $(this).prepend('<div class="secTools"/><div class="secLabel">' + $(this).attr("title") + '</div><div class="clear"/>');
    });
    $("#workspace").append('<p>1. Input: Oevre/Sorted Images (NEVER YOUR ORIGINAL OEVRE!): <span id="oevreDir">' + localStorage.oevreDir + '</span></p>');
    $("#workspace").append('<p>2. Input: Template: <span id="photobook">' + localStorage.photobook + '</span></p>');
    $("#workspace").append('<p>------------------------------------------------------------------------------------------------------------------------------------------------</p>');
    $("#workspace").append('<p>Target: <span id="target">' + localStorage.target + '</span></p>');
    $("#oevreDir").on("click", function() {
      return tools.chooseDirectory(function(dir) {
        localStorage.oevreDir = dir;
        return $("#oevreDir").html(dir);
      });
    });
    $("#photobook").on("click", function() {
      return tools.chooseFile(function(file) {
        localStorage.photobook = file;
        return $("#photobook").html(file);
      });
    });
    $("#target").on("click", function() {
      return tools.chooseFileSave(function(file) {
        localStorage.target = file;
        return $("#target").html(file);
      });
    });
    $("#toolbar").append('<button id="extractData">Filename -> Data</button>');
    $("#extractData").on("click", function() {
      if (localStorage.oevreDir !== void 0) {
        return _walkDirExtraction(localStorage.oevreDir);
      }
    });
    $("#toolbar").append('<button id="sortImages">Sort Images</button>');
    $("#sortImages").on("click", function() {
      if (localStorage.oevreDir !== void 0) {
        return _sortImages(localStorage.oevreDir);
      }
    });
    $("#toolbar").append('<button id="createPhotobook">Create Photobook</button>');
    $("#createPhotobook").on("click", function() {
      return _createPhotobook(localStorage.oevreDir, localStorage.photobook, localStorage.target);
    });
    $("#console .secTools").append('<span id="toggleOutput">Hide</span> | <span id="clearOutput">Clear</span> | <span id="toggleScrolling">Scrolling Off</span>');
    $("#console").append('<pre id="output"></pre>');
    $("#clearOutput").on("click", function() {
      return $("#output").html("");
    });
    $("#toggleOutput").on("click", function() {
      if ($("#output").is(":visible")) {
        $("#output").fadeOut();
        return $("#toggleOutput").html("Show");
      } else {
        $("#output").fadeIn();
        return $("#toggleOutput").html("Hide");
      }
    });
    return $("#toggleScrolling").on("click", function() {
      if (consoleScrolling) {
        consoleScrolling = false;
        return $("#toggleScrolling").html("Scrolling On");
      } else {
        consoleScrolling = true;
        return $("#toggleScrolling").html("Scrolling Off");
      }
    });
  } catch (_error) {
    error = _error;
    return _log(error);
  }
});

//# sourceMappingURL=index.map
