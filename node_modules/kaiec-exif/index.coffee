exec = require('child_process').exec
tools = require "kaiec-tools"
log = tools.log
fs = require('fs')
uuid = require('node-uuid')
temp = require('temp').track()
path = require "path"

class Exif
  constructor: (@exiftool) ->

  getSize: (file, callback) ->
    tempJpg = path.dirname(file) + "\\" + "exif-temp-" + uuid.v1() + path.extname(file)
    command = "#{@exiftool} -j -s -ImageWidth -ImageHeight \"" + tempJpg + "\""
    # log.fine(command)
    fs.renameSync(file,tempJpg)
    exec(command, (err,data) =>
      if (err!=null)
        throw "Error: " + err
      fs.renameSync(tempJpg, file)
      d = JSON.parse(data)
      callback({width: +d[0].ImageWidth, height: +d[0].ImageHeight})
    )

  getXMPTags: (ns, tags, file, callback) ->
    tagline = ("-XMP-#{ns}:" + t for t in tags).join(" ")
    tempJpg = path.dirname(file) + "\\" + "exif-temp-" + uuid.v1() + path.extname(file)
    command = "#{@exiftool} -G1 -j -S " + tagline + " \"" + tempJpg + "\""
    # log.fine(command)
    fs.renameSync(file,tempJpg)
    exec(command, (err,data) =>
      if (err!=null)
        throw "Error: " + err
      fs.renameSync(tempJpg, file)
      imageData = JSON.parse(data)
      callback(@fromXMT(ns, imageData))
    )

  setXMPTags: (ns, imageData, file) ->
    temp.open("#{ns}-json-", (err, t) =>
      if t == undefined
        _log(err)
      else
        log.fine("JSON Temp File: " + t.path)
        log.fine("File to be processed: " + file)
        tempJpg = path.dirname(file) + "\\" + "exif-temp-" + uuid.v1() + path.extname(file)
        log.fine("Temp Image: " + tempJpg)
        xmtData = @toXMT(ns, imageData, tempJpg)
        log.fine("XMT Data: " + JSON.stringify(xmtData,null,2))
        fs.write(t.fd, JSON.stringify(xmtData))
        fs.renameSync(file,tempJpg)
        fs.close(t.fd)
        command = @exiftool + ' -overwrite_original -m -j="' + t.path + '" -G1 "' + tempJpg + '"'
        log.fine("Exec: " + command)
        tools.exec(command, (err, stdout, stderr) ->
          try
            if (err!=null)
              log.error("Error: " + err)
            log.fine("Restore: " + file)
            fs.renameSync(tempJpg, file)
          catch error
            log.error(error)
            log.error(stderr)
      )
    )


  ###
    Prepend all uppercase first letter properties with XMP namespace
    Add SourceFile property based on file or on tmpSourceFile property
  ###
  toXMT: (ns, imageData, file) ->
    result = {}
    for own key, value of imageData
      result["XMP-#{ns}:" + key] = value if key.substr(0,1)==key.substr(0,1).toUpperCase()
    result.SourceFile = if file != undefined then path.normalize(file) else imageData.tmpSourceFile
    return result

  ###
    Remove XMP namespaces from all tags
    Store SourceFile in tmpSourceFile for later restoration
  ###
  fromXMT: (ns, imageData) ->
    result = {}
    for own key, value of imageData[0]
      result[key.replace("XMP-#{ns}:","")] = value if key.indexOf("XMP-#{ns}:")==0
      result["tmpSourceFile"] = value if key == "SourceFile"
    return result


module.exports.Exif = Exif