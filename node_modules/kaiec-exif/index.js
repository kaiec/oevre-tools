// Generated by CoffeeScript 1.7.1
(function() {
  var Exif, exec, fs, log, path, temp, tools, uuid,
    __hasProp = {}.hasOwnProperty;

  exec = require('child_process').exec;

  tools = require("kaiec-tools");

  log = tools.log;

  fs = require('fs');

  uuid = require('node-uuid');

  temp = require('temp').track();

  path = require("path");

  Exif = (function() {
    function Exif(exiftool) {
      this.exiftool = exiftool;
    }

    Exif.prototype.getSize = function(file, callback) {
      var command, tempJpg;
      tempJpg = path.dirname(file) + "\\" + "exif-temp-" + uuid.v1() + path.extname(file);
      command = ("" + this.exiftool + " -j -s -ImageWidth -ImageHeight \"") + tempJpg + "\"";
      fs.renameSync(file, tempJpg);
      return exec(command, (function(_this) {
        return function(err, data) {
          var d;
          if (err !== null) {
            throw "Error: " + err;
          }
          fs.renameSync(tempJpg, file);
          d = JSON.parse(data);
          return callback({
            width: +d[0].ImageWidth,
            height: +d[0].ImageHeight
          });
        };
      })(this));
    };

    Exif.prototype.getXMPTags = function(ns, tags, file, callback) {
      var command, t, tagline, tempJpg;
      tagline = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tags.length; _i < _len; _i++) {
          t = tags[_i];
          _results.push(("-XMP-" + ns + ":") + t);
        }
        return _results;
      })()).join(" ");
      tempJpg = path.dirname(file) + "\\" + "exif-temp-" + uuid.v1() + path.extname(file);
      command = ("" + this.exiftool + " -G1 -j -S ") + tagline + " \"" + tempJpg + "\"";
      fs.renameSync(file, tempJpg);
      return exec(command, (function(_this) {
        return function(err, data) {
          var imageData;
          if (err !== null) {
            throw "Error: " + err;
          }
          fs.renameSync(tempJpg, file);
          imageData = JSON.parse(data);
          return callback(_this.fromXMT(ns, imageData));
        };
      })(this));
    };

    Exif.prototype.setXMPTags = function(ns, imageData, file) {
      return temp.open("" + ns + "-json-", (function(_this) {
        return function(err, t) {
          var command, tempJpg, xmtData;
          if (t === void 0) {
            return _log(err);
          } else {
            log.fine("JSON Temp File: " + t.path);
            log.fine("File to be processed: " + file);
            tempJpg = path.dirname(file) + "\\" + "exif-temp-" + uuid.v1() + path.extname(file);
            log.fine("Temp Image: " + tempJpg);
            xmtData = _this.toXMT(ns, imageData, tempJpg);
            log.fine("XMT Data: " + JSON.stringify(xmtData, null, 2));
            fs.write(t.fd, JSON.stringify(xmtData));
            fs.renameSync(file, tempJpg);
            fs.close(t.fd);
            command = _this.exiftool + ' -overwrite_original -m -j="' + t.path + '" -G1 "' + tempJpg + '"';
            log.fine("Exec: " + command);
            return tools.exec(command, function(err, stdout, stderr) {
              var error;
              try {
                if (err !== null) {
                  log.error("Error: " + err);
                }
                log.fine("Restore: " + file);
                return fs.renameSync(tempJpg, file);
              } catch (_error) {
                error = _error;
                log.error(error);
                return log.error(stderr);
              }
            });
          }
        };
      })(this));
    };


    /*
      Prepend all uppercase first letter properties with XMP namespace
      Add SourceFile property based on file or on tmpSourceFile property
     */

    Exif.prototype.toXMT = function(ns, imageData, file) {
      var key, result, value;
      result = {};
      for (key in imageData) {
        if (!__hasProp.call(imageData, key)) continue;
        value = imageData[key];
        if (key.substr(0, 1) === key.substr(0, 1).toUpperCase()) {
          result[("XMP-" + ns + ":") + key] = value;
        }
      }
      result.SourceFile = file !== void 0 ? path.normalize(file) : imageData.tmpSourceFile;
      return result;
    };


    /*
      Remove XMP namespaces from all tags
      Store SourceFile in tmpSourceFile for later restoration
     */

    Exif.prototype.fromXMT = function(ns, imageData) {
      var key, result, value, _ref;
      result = {};
      _ref = imageData[0];
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        value = _ref[key];
        if (key.indexOf("XMP-" + ns + ":") === 0) {
          result[key.replace("XMP-" + ns + ":", "")] = value;
        }
        if (key === "SourceFile") {
          result["tmpSourceFile"] = value;
        }
      }
      return result;
    };

    return Exif;

  })();

  module.exports.Exif = Exif;

}).call(this);
