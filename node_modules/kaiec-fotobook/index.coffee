xpath = require('xpath')
path = require('path')
tools = require "kaiec-tools"
xml = tools.xml
log = tools.log
Exif = new require('kaiec-exif').Exif
exif = new Exif("exiftool\\exiftool")
async = require("async")
fs = require("fs-extra")

class Fotobook
  constructor: (@mcfFile, @target) ->
    @doc = xml.readXmlFile(@mcfFile)
    @imageQueue = async.queue(@_insertImage,1)
    @imageDir = path.dirname(@target) + path.sep + path.basename(@target, path.extname(@target)) + "_" + path.extname(@target).substr(1) + "-Dateien"
    fs.mkdirsSync(@imageDir)
    xpath.select("/fotobook/@imagedir", @doc)[0].value = path.basename(@imageDir)


  addPage: ->
    @newPage = new Page(@getTemplatePage())
    @anchor = xml.nextElementSibling(@getTemplatePage()) if @anchor == undefined


  insertImage: (file) ->
    @imageQueue.push(file)

  ready: (callback) ->
    @imageQueue.drain = =>
      if @newPage!=undefined
        log.fine("Inserting unfilled page.")
        xml.insertAfter(@newPage.left, @anchor)
        xml.insertAfter(@newPage.right, @newPage.left)
        @anchor = @newPage.right
        @newPage = undefined
      normalpages = xpath.select("/fotobook/page", @doc).length - 5
      normalpages = normalpages + (8 - (normalpages % 8)) + 2
      totalpages = normalpages + 5
      xpath.select("/fotobook/@normalpages", @doc)[0].value="#{normalpages}"
      xpath.select("/fotobook/@totalpages", @doc)[0].value="#{totalpages}"
      xpath.select("/fotobook/@productvariant", @doc)[0].value="pages:#{normalpages}"
      fs.writeFileSync(@target,@doc)
      callback()


  _insertImage: (file, callback) =>
    log.fine("Inserting #{file}, Queue Size: #{@imageQueue.length()}")
    fs.copySync(file, @imageDir + path.sep + path.basename(file))
    if (@newPage == undefined) then @addPage()
    @newPage.insertImage(file, =>
      if not @newPage.hasMoreImages()
        xml.insertAfter(@newPage.left, @anchor)
        xml.insertAfter(@newPage.right, @newPage.left)
        @anchor = @newPage.right
        @newPage = undefined
      callback()
    )



  ###
  The template page is the first page with a marker.
  ###
  getTemplatePage: ->
    markerNodes = xpath.select("//text()[contains(., '###-')]", @doc)
    if markerNodes.length==0 then throw "Error: No marker (like ###-1-Title-###) found."
    @findPageForNode(markerNodes[0])



  findPageForNode: (node) ->
    if (node==null) then return null
    if (node.localName=="page") then return node
    else return @findPageForNode(node.parentNode)

  getStatistics: ->
    result = "Statistics for #{@mcfFile}:\n"
    result += "Template Page: " + @getTemplatePage().getAttribute("pagenr") + "\n"
    result += "Image Directory: " + @imageDir + "\n"
    page = new Page(@getTemplatePage())
    result += "Images: " + page.images + "\n"
    result += "Markers:\n"
    for marker in page.getMarker()
        result += "  " + marker.marker + " - " + marker.index + " - " + marker.variable + "\n"
    return result

class Page
  constructor: (@template) ->
    @left = @template.cloneNode(true)
    @right = xml.nextElementSibling(template).cloneNode(true)
    @filled = 0
    @images = @getImageNodes().length
    if (@images==0) then throw "Error: No images on template page!"


  getImageNodes: ->
    xpath.select("./area/image", @left)

  hasMoreImages: ->
    @filled<@images

  getMarker: (index) ->
    markerNodes = xpath.select(".//text()[contains(.,'###-')]", @left)
    marker = []
    for node in markerNodes
      text = node.textContent
      regex = /###-([\d]+)-([^#]*)-###/g
      matches  = regex.exec(text)
      while matches!=null
        m = {
          marker: matches[0],
          node: node,
          index: matches[1],
          variable: matches[2]
        }
        marker.push(m) if (index == undefined or index == +m.index)
        matches  = regex.exec(text)
    return marker

  insertImage: (file, callback) ->
    if not @hasMoreImages() then throw "Error: Page is already filled!"
    imageNode = @getImageNodes()[@filled]
    @filled++
    marker = @getMarker(@filled)
    exif.getSize(file, (size) =>
      log.fine("Image Size: " + size.width + "x" + size.height)
      area = {
        width: +xpath.select("../@width", imageNode)[0].value,
        height: +xpath.select("../@height", imageNode)[0].value,
        top: +xpath.select("../@top", imageNode)[0].value,
        left: +xpath.select("../@left", imageNode)[0].value
      }
      scaleW = area.width / size.width
      scaleH = area.height / size.height
      if (scaleW<scaleH)
        scale = scaleW
        dl=0
        dt=(area.height - (size.height*scale))/2
      else
        scale = scaleH
        dt=0
        dl=(area.width - (size.width*scale))/2
      xpath.select("../@width", imageNode)[0].value = "#{size.width * scale}"
      xpath.select("../@height", imageNode)[0].value = "#{size.height * scale}"
      xpath.select("../@top", imageNode)[0].value = "#{area.top + dt}"
      xpath.select("../@left", imageNode)[0].value = "#{area.left + dl}"
      imageNode.setAttribute("safeContainerLocation", "PERSISTENT")
      imageNode.setAttribute("left", "0")
      imageNode.setAttribute("top", "0")
      imageNode.setAttribute("scale", "#{scale}")
      imageNode.setAttribute("filename", path.basename(file))
      imageNode.setAttribute("useABK", "1")
      relationships = @left.ownerDocument.createElement("relationships");
      rel = @left.ownerDocument.createElement("relationship")
      imageNode.appendChild(relationships)
      relationships.appendChild(rel)
      rel.setAttribute("parent", file)
      rel.setAttribute("child", path.basename(file))
      rel.setAttribute("nature", "RELATIONSHIP_ONE_TO_ONE_COPY")
      tags = []
      for m in marker
        tags.push(m.variable)
      exif.getXMPTags("oevre",tags,file,(imageData)=>
        for m in marker
          log.fine("Marker: #{m.marker} -> Value: #{imageData[m.variable]}")
          m.node.data = m.node.data.replace(m.marker, imageData[m.variable])
        callback()
      )

      ###
      <image safeContainerLocation="PERSISTENT" left="0" top="0" scale="0.319643" filename="1983, Durchgang, Ölkreide, 41x56-IMG_4458.jpeg" useABK="1">
        <relationships>
          <relationship parent="C:/Users/Eckert/Desktop/Oevre-Kai-Test/Ulec/Abstrakt/1983, Durchgang, Ölkreide, 41x56-IMG_4458.JPG" child="1983, Durchgang, Ölkreide, 41x56-IMG_4458.jpeg" nature="RELATIONSHIP_ONE_TO_ONE_COPY"/>
        </relationships>
      </image>
      ###

    )


module.exports.Fotobook = Fotobook