// Generated by CoffeeScript 1.7.1
(function() {
  var Exif, Fotobook, Page, async, exif, fs, log, path, tools, xml, xpath,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  xpath = require('xpath');

  path = require('path');

  tools = require("kaiec-tools");

  xml = tools.xml;

  log = tools.log;

  Exif = new require('kaiec-exif').Exif;

  exif = new Exif("exiftool\\exiftool");

  async = require("async");

  fs = require("fs-extra");

  Fotobook = (function() {
    function Fotobook(mcfFile, target) {
      this.mcfFile = mcfFile;
      this.target = target;
      this._insertImage = __bind(this._insertImage, this);
      this.doc = xml.readXmlFile(this.mcfFile);
      this.imageQueue = async.queue(this._insertImage, 1);
      this.imageDir = path.dirname(this.target) + path.sep + path.basename(this.target, path.extname(this.target)) + "_" + path.extname(this.target).substr(1) + "-Dateien";
      fs.mkdirsSync(this.imageDir);
      xpath.select("/fotobook/@imagedir", this.doc)[0].value = path.basename(this.imageDir);
    }

    Fotobook.prototype.addPage = function() {
      this.newPage = new Page(this.getTemplatePage());
      if (this.anchor === void 0) {
        return this.anchor = xml.nextElementSibling(this.getTemplatePage());
      }
    };

    Fotobook.prototype.insertImage = function(file) {
      return this.imageQueue.push(file);
    };

    Fotobook.prototype.ready = function(callback) {
      return this.imageQueue.drain = (function(_this) {
        return function() {
          var normalpages, totalpages;
          if (_this.newPage !== void 0) {
            log.fine("Inserting unfilled page.");
            xml.insertAfter(_this.newPage.left, _this.anchor);
            xml.insertAfter(_this.newPage.right, _this.newPage.left);
            _this.anchor = _this.newPage.right;
            _this.newPage = void 0;
          }
          normalpages = xpath.select("/fotobook/page", _this.doc).length - 5;
          normalpages = normalpages + (8 - (normalpages % 8)) + 2;
          totalpages = normalpages + 5;
          xpath.select("/fotobook/@normalpages", _this.doc)[0].value = "" + normalpages;
          xpath.select("/fotobook/@totalpages", _this.doc)[0].value = "" + totalpages;
          xpath.select("/fotobook/@productvariant", _this.doc)[0].value = "pages:" + normalpages;
          fs.writeFileSync(_this.target, _this.doc);
          return callback();
        };
      })(this);
    };

    Fotobook.prototype._insertImage = function(file, callback) {
      log.fine("Inserting " + file + ", Queue Size: " + (this.imageQueue.length()));
      fs.copySync(file, this.imageDir + path.sep + path.basename(file));
      if (this.newPage === void 0) {
        this.addPage();
      }
      return this.newPage.insertImage(file, (function(_this) {
        return function() {
          if (!_this.newPage.hasMoreImages()) {
            xml.insertAfter(_this.newPage.left, _this.anchor);
            xml.insertAfter(_this.newPage.right, _this.newPage.left);
            _this.anchor = _this.newPage.right;
            _this.newPage = void 0;
          }
          return callback();
        };
      })(this));
    };


    /*
    The template page is the first page with a marker.
     */

    Fotobook.prototype.getTemplatePage = function() {
      var markerNodes;
      markerNodes = xpath.select("//text()[contains(., '###-')]", this.doc);
      if (markerNodes.length === 0) {
        throw "Error: No marker (like ###-1-Title-###) found.";
      }
      return this.findPageForNode(markerNodes[0]);
    };

    Fotobook.prototype.findPageForNode = function(node) {
      if (node === null) {
        return null;
      }
      if (node.localName === "page") {
        return node;
      } else {
        return this.findPageForNode(node.parentNode);
      }
    };

    Fotobook.prototype.getStatistics = function() {
      var marker, page, result, _i, _len, _ref;
      result = "Statistics for " + this.mcfFile + ":\n";
      result += "Template Page: " + this.getTemplatePage().getAttribute("pagenr") + "\n";
      result += "Image Directory: " + this.imageDir + "\n";
      page = new Page(this.getTemplatePage());
      result += "Images: " + page.images + "\n";
      result += "Markers:\n";
      _ref = page.getMarker();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        marker = _ref[_i];
        result += "  " + marker.marker + " - " + marker.index + " - " + marker.variable + "\n";
      }
      return result;
    };

    return Fotobook;

  })();

  Page = (function() {
    function Page(template) {
      this.template = template;
      this.left = this.template.cloneNode(true);
      this.right = xml.nextElementSibling(template).cloneNode(true);
      this.filled = 0;
      this.images = this.getImageNodes().length;
      if (this.images === 0) {
        throw "Error: No images on template page!";
      }
    }

    Page.prototype.getImageNodes = function() {
      return xpath.select("./area/image", this.left);
    };

    Page.prototype.hasMoreImages = function() {
      return this.filled < this.images;
    };

    Page.prototype.getMarker = function(index) {
      var m, marker, markerNodes, matches, node, regex, text, _i, _len;
      markerNodes = xpath.select(".//text()[contains(.,'###-')]", this.left);
      marker = [];
      for (_i = 0, _len = markerNodes.length; _i < _len; _i++) {
        node = markerNodes[_i];
        text = node.textContent;
        regex = /###-([\d]+)-([^#]*)-###/g;
        matches = regex.exec(text);
        while (matches !== null) {
          m = {
            marker: matches[0],
            node: node,
            index: matches[1],
            variable: matches[2]
          };
          if (index === void 0 || index === +m.index) {
            marker.push(m);
          }
          matches = regex.exec(text);
        }
      }
      return marker;
    };

    Page.prototype.insertImage = function(file, callback) {
      var imageNode, marker;
      if (!this.hasMoreImages()) {
        throw "Error: Page is already filled!";
      }
      imageNode = this.getImageNodes()[this.filled];
      this.filled++;
      marker = this.getMarker(this.filled);
      return exif.getSize(file, (function(_this) {
        return function(size) {
          var area, dl, dt, m, rel, relationships, scale, scaleH, scaleW, tags, _i, _len;
          log.fine("Image Size: " + size.width + "x" + size.height);
          area = {
            width: +xpath.select("../@width", imageNode)[0].value,
            height: +xpath.select("../@height", imageNode)[0].value,
            top: +xpath.select("../@top", imageNode)[0].value,
            left: +xpath.select("../@left", imageNode)[0].value
          };
          scaleW = area.width / size.width;
          scaleH = area.height / size.height;
          if (scaleW < scaleH) {
            scale = scaleW;
            dl = 0;
            dt = (area.height - (size.height * scale)) / 2;
          } else {
            scale = scaleH;
            dt = 0;
            dl = (area.width - (size.width * scale)) / 2;
          }
          xpath.select("../@width", imageNode)[0].value = "" + (size.width * scale);
          xpath.select("../@height", imageNode)[0].value = "" + (size.height * scale);
          xpath.select("../@top", imageNode)[0].value = "" + (area.top + dt);
          xpath.select("../@left", imageNode)[0].value = "" + (area.left + dl);
          imageNode.setAttribute("safeContainerLocation", "PERSISTENT");
          imageNode.setAttribute("left", "0");
          imageNode.setAttribute("top", "0");
          imageNode.setAttribute("scale", "" + scale);
          imageNode.setAttribute("filename", path.basename(file));
          imageNode.setAttribute("useABK", "1");
          relationships = _this.left.ownerDocument.createElement("relationships");
          rel = _this.left.ownerDocument.createElement("relationship");
          imageNode.appendChild(relationships);
          relationships.appendChild(rel);
          rel.setAttribute("parent", file);
          rel.setAttribute("child", path.basename(file));
          rel.setAttribute("nature", "RELATIONSHIP_ONE_TO_ONE_COPY");
          tags = [];
          for (_i = 0, _len = marker.length; _i < _len; _i++) {
            m = marker[_i];
            tags.push(m.variable);
          }
          return exif.getXMPTags("oevre", tags, file, function(imageData) {
            var _j, _len1;
            for (_j = 0, _len1 = marker.length; _j < _len1; _j++) {
              m = marker[_j];
              log.fine("Marker: " + m.marker + " -> Value: " + imageData[m.variable]);
              m.node.data = m.node.data.replace(m.marker, imageData[m.variable]);
            }
            return callback();
          });

          /*
          <image safeContainerLocation="PERSISTENT" left="0" top="0" scale="0.319643" filename="1983, Durchgang, Ölkreide, 41x56-IMG_4458.jpeg" useABK="1">
            <relationships>
              <relationship parent="C:/Users/Eckert/Desktop/Oevre-Kai-Test/Ulec/Abstrakt/1983, Durchgang, Ölkreide, 41x56-IMG_4458.JPG" child="1983, Durchgang, Ölkreide, 41x56-IMG_4458.jpeg" nature="RELATIONSHIP_ONE_TO_ONE_COPY"/>
            </relationships>
          </image>
           */
        };
      })(this));
    };

    return Page;

  })();

  module.exports.Fotobook = Fotobook;

}).call(this);
